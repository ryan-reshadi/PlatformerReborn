declare class VisibleObject {
    public x: number;
    public y: number;
    public constructor(x: number, y: number);
    public adjustOffset(dx: number): void;
}
export { VisibleObject };

declare class BackGround extends VisibleObject {
    public image: HTMLImageElement;
    public constructor(src: string);
    public draw(): void;
}
export { BackGround };

declare class Player extends VisibleObject {
    public startingPosition: { x: number, y: number };
    public size: number;
    public speed: number;
    public velocityY: number;
    public score: number;
    public onGround: boolean;
    public direction: string;
    public damageable: boolean;
    public deaths: number;
    public elementIndex: number;
    public phaseable: boolean;
    public constructor(startingPosition: { x: number, y: number });
    public setStartingPosition(startingPosition: { x: number, y: number }, sendPlayer?: boolean): void;
    public die(): void;
    public move(dx: number): void;
    public update(): void;
    public draw(): void;
    public jump(): void;
}
export { Player };

declare class Ability {
    public player: Player;
    public ready: boolean;
    public constructor(player: Player);
    public tick(): void;
}
export { Ability };

declare class CooldownAbility extends Ability {
    public cooldownTime: number;
    public cooldownTimeRemaining: number;
    public cooldownInterval: ReturnType<typeof setInterval> | null;
    public constructor(player: Player, cooldownTime: number);
    public tick(): void;
    public cooldownTimerStart(): void;
}
export { CooldownAbility };

declare class DurationAbility extends CooldownAbility {
    public duration: number;
    public durationRemaining: number;
    public active: boolean;
    public durationInterval?: ReturnType<typeof setInterval> | null;
    public constructor(player: Player, duration: number, cooldownTime: number);
    public tick(): void;
    public durationTimerStart(): void;
    public abilityDeactivation(): void;
}
export { DurationAbility };

declare class ChargeUpAbility extends CooldownAbility {
    public chargingUp: boolean;
    public chargeLevel: number;
    public chargeInterval: ReturnType<typeof setInterval> | null;
    public maxCharge: number;
    public constructor(player: Player, cooldownTime: number);
    public beginCharging(): void;
    public checkDischarge(key: string): void;
    public discharge(): void;
}
export { ChargeUpAbility };

declare class WaterAbility extends Ability {
    public constructor(player: Player);
    public abilityActivation(direction: string): void;
}
export { WaterAbility };

declare class LightningAbility extends CooldownAbility {
    public constructor(player: Player, cooldownTime: number);
    public abilityActivation(blinkDirection: number, blinkDistance: number): void;
}
export { LightningAbility };

declare class LightningSuperAbility extends ChargeUpAbility {
    public constructor(player: Player, cooldown: number);
    public checkDischarge(key: string): void;
    public discharge(): void;
    public abilityActivation(): void;
}
export { LightningSuperAbility };

declare class WindAbility1 extends CooldownAbility {
    public constructor(player: Player, cooldownTime: number);
    public abilityActivation(): void;
}
export { WindAbility1 };

declare class WindAbility2 extends DurationAbility {
    public constructor(player: Player, duration: number, cooldown: number);
    public abilityActivation(): void;
    public abilityDeactivation(): void;
}
export { WindAbility2 };

declare class GhostAbility extends DurationAbility {
    public constructor(player: Player, duration: number, cooldownTime: number);
    public abilityActivation(): void;
    public abilityDeactivation(): void;
}
export { GhostAbility };

declare class Element {
    public player: Player;
    public abilities: Ability[];
    public constructor(player: Player);
    public keyChecker(key: string): void;
}
export { Element };

declare class WaterElement extends Element {
    public constructor(player: Player);
    public keyChecker(key: string): void;
}
export { WaterElement };

declare class WindElement extends Element {
    public constructor(player: Player);
    public keyChecker(key: string): void;
}
export { WindElement };

declare class LightningElement extends Element {
    public blinkDistance: number;
    public constructor(player: Player);
    public keyChecker(key: string): void;
}
export { LightningElement };

declare class GhostElement extends Element {
    public constructor(player: Player);
    public keyChecker(key: string): void;
}
export { GhostElement };

declare class FireElement extends Element {}
export { FireElement };

declare class Water extends VisibleObject {
    public size: number;
    public speed: number;
    public direction: string;
    public image: HTMLImageElement;
    public constructor(x: number, y: number, direction: string);
    public draw(): void;
    public collide(object: { x: number, y: number, size: number }): boolean;
    public die(): void;
    public tick(): void;
}
export { Water };

declare class Fire extends VisibleObject {
    public size: number;
    public dead: boolean;
    public image: HTMLImageElement;
    public constructor(x: number, y: number);
    public draw(): void;
    public die(): void;
    public playerCollide(player: Player): boolean | undefined;
    public waterCollide(water: Water): void;
}
export { Fire };

declare class Platform extends VisibleObject {
    public width: number;
    public length: number;
    public color: string;
    public phaseable: boolean;
    public constructor(x: number, y: number, width: number, length: number, color: string, phaseable?: boolean);
    public draw(): void;
}
export { Platform };

declare class MovingPlatform extends Platform {
    public Xspeed: number;
    public Yspeed: number;
    public XLowerBound: number;
    public XUpperBound: number;
    public YLowerBound: number;
    public YUpperBound: number;
    public constructor(
        x: number, y: number, width: number, length: number, color: string,
        Xspeed: number, Yspeed: number,
        XLowerBound: number, YLowerBound: number, XUpperBound: number, YUpperBound: number
    );
    public update(): void;
}
export { MovingPlatform };

declare function startLevel(level: number): void;
export { startLevel };
